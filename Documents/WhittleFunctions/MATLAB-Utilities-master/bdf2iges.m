function varargout = bdf2iges( varargin )
% BDF2IGES
%
%   Converts a RR blade definition file into IGES format ready to read into
%   CAD.
%   
%   N.B. assumes that the RR blade definition file is in metres and the
%   generated IGES file is in mm.
%
% Format:
%
%   "BDF2IGES;" will prompt the user for the input file.  By default, the
%   IGES file will be saved to a default file name generated by BDF2IGES in
%   the same directory as the input blade definition file.
%
%   "BDF2IGES('PARAMETER','VALUE');" allows the user to set a a number of
%   optional parameter value pairs listed below.  In particular, these
%   parameter/ value pairs can be used to directly specifiy the input blade
%   definiton file and the output IGES file and suppress the user promt
%   when running in "script" mode.
%
%   Parameter   Desctiption
%   ---------   -----------
%   filename    RR blade definition file name to convert.  Set to '' (i.e.
%               empty string) to prompt the user for the input blade 
%               defininton file name.
%   igesfile    IGES output file name. Set to "usedefault" to use the
%               default IGES file name generated by BDF2IGES or set to '' 
%               (i.e. empty-string) to prompt the user for the output file
%               name.
%   defaultPath Initial search path for blade definition files.
%   author      Defaults to current username.
%   company     Defaults to "Whittle Laboratory, University of Cambridge"
%
%   "srf = BDF2IGES(...);" outputs a structure describing the NURBS 
%   representation of the blade surface compatible with the NURBS toolbox.
%
%   "[srf,bld] = BDF2IGES(...);" also outputs "BLD", a 
%
% SEE ALSO
%   
%   READBLADEDEF, RESAMPLEBLADEDEF, NRBLOFT, IGESOUT, NURBS Toolbox


%% Defaults

% File I/O parameters
defaults.filename = '';
defaults.igesfile = 'usedefault';
defaults.defaultPath = getuserdir;
defaults.forceOverwrite = false;

% IGES parameters
defaults.author = getenv('USERNAME');
defaults.company = 'Whittle Laboratory, University of Cambridge';

% Re-sample parameters
defaults.npts = 500;
defaults.rr = 0.02;
defaults.sigFac = 1.0;

% Plotting flag
defaults.iplot = true; %Not currently implemented.

%% Input Arguments

p = inputParser;
params = fieldnames(defaults);
for ii = 1:length(params)
    addParamValue(p,params{ii}, defaults.(params{ii}) );
end
parse(p,varargin{:});

%% Reads Blade Defininion

disp('  Reading blade definition file...')
[bdf,filename] = readBladeDef('filename',p.Results.filename,...
    'defaultPath',p.Results.defaultPath);

%% Output file name

% Unpacks IGES output file name (if specified);
igesfile = p.Results.igesfile;

% Generates default file name
[defaultPath,defaultFile,extTmp] = fileparts( filename);
defaultFile = fullfile(defaultPath,[defaultFile,'.igs']);
if strcmp(lower(igesfile),'usedefault');
    igesfile = defaultFile;
end

% Checks if specified file exisits
if ~isempty( igesfile)
    if exist( igesfile ,'file')
        % Warning message
        disp(['  IGES file "',igesfile,'" already exists.  Archiving old version...']);

        % Generates new file name
        [pname,fname,ext] = fileparts(igesfile);
        details = dir(igesfile);
        dateStr = details.date;
        isColon = dateStr == ':';
        dateStr(isColon) = '';
        newName = [fname,' ',dateStr,ext];
        newName = fullfile(pname,newName);
        
        % Copys exising file to a backup tagged with the date/ time of
        % creation
        [success,message,messageID] = copyfile(igesfile,newName,'f'); 

        % Displays progress to screen
        if success == 1
            disp(['  Old version archived to "',newName,'".']);
        else
            disp(['  Problem archiving "',newName,'".']);
            disp(['  ',message]);
        end
    end
end
    
% Gets IGES file name from user
if isempty(igesfile)
    titStr = 'Save IGES file';
    filterSpec = {'*.igs;*.iges','IGES files (*.igs, *.iges)';
        '*.*','All files (*.*)'};
    [fname,pname] = uiputfile( filterSpec, titStr, defaultFile);
    
    % Cancel check
    if isequal(fname,0)
        return
    end
    
    % Full IGES file name
    igesfile = fullfile( pname,fname);
        
end


%% Resamples Blade

disp('  Resampling blade surface...')
bld = resampleBladeDef(bdf,...
    'npts',p.Results.npts,...
    'rr',p.Results.rr,...
    'sigFac',p.Results.sigFac);


%% Generates NURBS surfaces

disp('  Generating NURBS surface...');

% Converts to mm
fields = {'x','y','z','xyzLE','xyzTE','radl','radt'};
for ii = 1:length(fields)
    bld.(fields{ii}) = bld.(fields{ii}).*1000;
end
bld.rtxLE(:,[1,3]) = bld.rtxLE(:,[1,3]).*1000;
bld.rtxTE(:,[1,3]) = bld.rtxTE(:,[1,3]).*1000;

% Generates NURBS surface
srf = nrbloft( bld.x,bld.y,bld.z,2);


%% Camberline and Thickness Distribution

disp('  Generating camber surface...');

% Initialises variables
nSec = size(bld.x,2);
nCam = 50;
bld.sCL = zeros( nCam, nSec);
bld.xCL = zeros( nCam, nSec);
bld.yCL = zeros( nCam, nSec);
bld.zCL = zeros( nCam, nSec);
bld.rCL = zeros( nCam, nSec);
bld.tCL = zeros( nCam, nSec);
iFailed = zeros(    1, nSec);

for ii = 1:nSec
    try
        % Parameterises section
        t(ii) = bl_parameterise_section([bdf(ii).bl(:,3),bdf(ii).bl(:,1).*bdf(ii).bl(:,2)]); 

        % Down-samples camber line
        q  = linspace(0,1, size( t(ii).s_cl,1) );
        qi = linspace(0,1,nCam)';
        bld.sCL(:,ii)  = interp1( q, t(ii).s_cl, qi,'linear');
        bld.xCL(:,ii)  = interp1( q, t(ii).xy_cl(:,1), qi,'linear');
        rtCL           = interp1( q, t(ii).xy_cl(:,2), qi,'linear');
        
        % Camberline radius
        sl = unique( bdf(ii).sl,'rows');
        bld.rCL(:,ii) = interp1( sl(:,1), sl(:,2), bld.xCL(:,ii), 'cubic');
        
        % Converts to Cartesian
        bld.tCL(:,ii) = rtCL./bld.rCL(:,ii);
        [bld.yCL(:,ii),bld.zCL(:,ii),bld.xCL(:,ii)] = pol2cart(bld.tCL(:,ii),bld.rCL(:,ii),bld.xCL(:,ii));

    catch
        disp(['  Problem paramerising section ',num2str(ii,'%i'),' - omitting.']);
        iFailed(ii) = 0;
        
    end
end

% Removes failed sections
var = {'sCL','xCL','yCL','zCL','rCL','tCL'};
indFailed = find(iFailed);
for ii = 1:length(var)
   bld.(var{ii})(:,indFailed) = [];
end

% Converts to mm
var = {'xCL','yCL','zCL','rCL'};
for ii = 1:length(var)
   bld.(var{ii}) =  bld.(var{ii}).*1000;
end

% Check size of final camber-surface
if all( size( bld.sCL ) >= 2 )
    srfCL = nrbloft(bld.xCL,bld.yCL,bld.zCL,2); 
else
    disp('  Insufficent sections parameterised - camber surface generation failed.')
end


%% Ouptuts IGES file

disp(['  Writing to "',igesfile,'"...'])
if exist('srfCL','var')
   op = {srf,srfCL};
else
   op = {srf};
end
igesout( op, igesfile,...
    'author',p.Results.author,...
    'company',p.Results.company);


%% Plotting

% Not yet implemented
if p.Results.iplot
    
    
end

%% Output arguments

if nargout >= 1; varargout{1} = srf; end
if nargout >= 2; varargout{2} = bld; end
if nargout >= 2; varargout{3} =   t; end

%% Ends function 
end

