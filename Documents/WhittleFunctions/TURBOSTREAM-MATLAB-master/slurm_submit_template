#!/bin/bash
#SBATCH -J NAME
#SBATCH -p ARCH
#SBATCH -A PRIORITY 
#SBATCH --mail-type=ALL
#SBATCH --nodes=N
#SBATCH --ntasks=T
#SBATCH --time=W
#SBATCH --requeue
#SBATCH --gres=gpu:G

#! PBS directives end here (put any additional directives above this line)
#!
#! Number of nodes and cores per node allocated by SLURM (do not change):
#numnodes=$[`cat $PBS_NODEFILE | uniq | wc -l`]
#ppn=$(uniq -c "$PBS_NODEFILE" | head --lines=1 | sed -e 's/^ *\([0-9]\+\) .*$/\1/g')
numnodes=$SLURM_JOB_NUM_NODES
numprocs=$SLURM_NTASKS
ppn=$(echo "$SLURM_TASKS_PER_NODE" | sed -e  's/^\([0-9][0-9]*\).*$/\1/')
#!
#! ############################################################
#! Modify the settings below to specify the application's location, environment, 
#! and launch method:  

#! Full path to application executable: 
application=A

#! Run options for the application:
options="INPUT OUTPUT"

#! Work directory (i.e. where the job will run):
workdir="DIRECTORY"

#! Override the default value of ppn (= Processes Per Node) if necessary
#! (e.g. because the memory required per process will otherwise overload the node).
#! Do this by uncommenting and editing the following line (ppn<=16):
ppn=P

#! Are you using OpenMP (NB this is unrelated to OpenMPI)? If so increase this
#! safe value to no more than 16:
export OMP_NUM_THREADS=1

#! Number of MPI tasks to be started by the application per node and in total (do not change):
mpi_tasks_per_node=$[$ppn/$OMP_NUM_THREADS]
np=$[${numnodes}*${mpi_tasks_per_node}]

#! Load modules
module purge                               # Removes all modules loaded by ~/.bashrc
MODULES

#! The following variables define a sensible pinning strategy for Intel MPI tasks -
#! this should be suitable for both pure MPI and hybrid MPI/OpenMP jobs:
export I_MPI_PIN_DOMAIN=omp:compact # Domains are $OMP_NUM_THREADS cores in size
export I_MPI_PIN_ORDER=scatter # Adjacent domains have minimal sharing of caches/sockets
#! Notes:
#! 1. These variables influence Intel MPI only.
#! 2. Domains are non-overlapping sets of cores which map 1-1 to MPI tasks.
#! 3. I_MPI_PIN_PROCESSOR_LIST is ignored if I_MPI_PIN_DOMAIN is set.
#! 4. If MPI tasks perform better when sharing caches/sockets, try I_MPI_PIN_ORDER=compact.

#! Command for running TURBOSTREAM
CMD=C

#! The remaining options for CMD assume we are using the OSC mpiexec
#! (use these for MVAPICH2 or non-MPI jobs):

#! Uncomment this first to load OSC mpiexec:
#module load mpiexec

#! This is the usual case (MPI processes on all cores):
#CMD="mpiexec -kill -comm pmi -npernode $mpi_tasks_per_node -np $np $application $options"

#! This is for starting identical copies of a non-MPI program on all cores:
#CMD="mpiexec -comm none -npernode $mpi_tasks_per_node -np $np $application $options"

###############################################################
### You should not have to change anything below this line ####
###############################################################

cd $workdir
echo -e "Changed directory to `pwd`.\n"

JOBID=$SLURM_JOB_ID

echo -e "JobID: $JOBID\n======"
echo "Time: `date`"
echo "Running on master node: `hostname`"
echo "Current directory: `pwd`"

if [ "$SLURM_JOB_NODELIST" ]; then
        #! Create a machine file:
        echo $SLURM_JOB_NODELIST | sed -e 's/,/\n/' > machine.file.$JOBID
        echo -e "\nNodes allocated:\n================"
        echo `cat machine.file.$JOBID | sed -e 's/\..*$//g'`
fi

echo -e "\nnumprocs=$numprocs, numnodes=$numnodes, ppn=$ppn (OMP_NUM_THREADS=$OMP_NUM_THREADS)"

echo -e "\nExecuting command:\n==================\n$CMD\n"

$CMD > LOG.txt
