%% ---- FUNCTION: CONTROL VOLUME ANALYSIS FOR DUCTED FAN ---- %%
function [d,g,q] = CVanalysis_comp(d,g,q,Lrs)

% REDO THIS
% Function using continuity, SFME and SFEE to analyse ducted fan
% Inputs: 
% - atm: atmospheric conditions
% - g: geometry of fan
% - eta: aerodynamic and electric system efficiencies
% - d.T: required thrust
% - d.u0: required forward speed
% - d.phi: flow coefficient of fan, can be an array
% - d.sig: area ratio of exit nozzle, can be an array
% Outputs: 
% - P: Ideal, shaft and electrical power in kW
% - vel: upstream, inlet and exit velocity, and blade velocities
% - rpm: shaft speed
% - psi: non-dimensional pressure rise, total-total and total-to-static
% - load: disk loading and thrust to power

%% Unpack
Th = d.Th; % Thrust
u0 = d.u0; % Flight speed
Tatm = q.atm.T; patm = q.atm.P;    
D = g.D; % Casing diameter
htrat = g.htrat; % Hub-to-tip ratio
AR = g.AR; % Blade aspect ratio
gam = q.gam;
R = q.R;
cp = q.cp;
phi = d.phi; 
sigma = d.sigma;

% Calculate geometry
rc = D/2; 
rh = rc*htrat;
rm = ((rc^2+rh^2)/2)^0.5;
A1 = pi*(rc^2 - rh^2);
A4 = A1 * sigma;

% Flight Mach Number and stagnation quantities
M0 = u0 / (gam*R*Tatm)^0.5;
p00 = patm ./ (1 + (gam-1)/2.*M0.^2).^-(gam/(gam-1));
T00 = Tatm ./ (1 + (gam-1)/2.*M0.^2).^-1;

% Set up Mach Number vector for lookups
M = 0.001:0.001:1;

% Non-dim impulse function for lookups
Fnd = (gam-1).^0.5 ./ gam .* (1+gam.*M.^2) ./ M .* (1 + (gam-1)/2.*M.^2).^-0.5;
% Non-dim mass flow functions for lookups
Mndp = gam / (gam-1)^0.5 .* M .* (1 + (gam-1)/2.*M.^2).^0.5;
Mndp0 = gam / (gam-1)^0.5 .* M .* (1 + (gam-1)/2.*M.^2).^(-0.5*(gam+1)/(gam-1));

% Assume exit pressure is atmospheric
p4 = patm;

% Guess T03 and initiate losses for iteration loops
T03 = 293; 
T04 = T03;


deltaT=1;
% deltaT_c = 0;
while abs(deltaT) > 0.001/100 %0.005 Now changing to percentagedeltaT_count
%     deltaT_c = deltaT_c+1;
    % Non-dimensional momentum equation with impulse function (see 3A3 EP2,Q1)
    Thcalc = A4.* (Fnd .* Mndp .* p4 - patm) - Mndp .* (cp*T04).^-0.5 .* p4 .* A4 .* u0;
    M4 = interp1(Thcalc,M,Th);
    Fnd4 = (gam-1).^0.5 ./ gam .* (1+gam.*M4.^2) ./ M4 .* (1 + (gam-1)/2.*M4.^2).^-0.5;
    
    % Exit conditions 
    p04 = p4 ./ (1 + (gam-1)/2.*M4.^2).^-(gam/(gam-1));
    T4 = T04 ./ (1 + (gam-1)/2.*M4.^2);
    u4 = M4.*(gam*R*T4)^0.5;
    
    % Inlet and Exit duct isentropic
    p03 = p04;
    p01 = p00;
    T01 = T00;

    % Calculate inlet Mach Number, M1
    Mndp4 = gam / (gam-1)^0.5 .* M4 .* (1 + (gam-1)/2.*M4.^2).^0.5;
    Mndp01 = Mndp4 .* p4./p01 .* (T01./T04).^0.5 .* sigma;
    M1 = interp1(Mndp0,M,Mndp01);
    T1 = T01 .* (1 + 0.5*(gam-1).*M1.^2).^-1;
    u1 = M1 .* (gam*R*T1)^0.5;
    
    % Blade speed from flow coefficient
    Um = u1/phi;
    U1 = Um*(1-CRDF_flag/2);
    U2 = -Um*CRDF_flag/2;
    rpm = U1 / (2*pi*rm) * 60;
    Mtip = U1 * rc/rm /(gam*R*T1)^0.5; % U1 = -U2, Mtip equal

    % Stage loading
    psi = cp*(T04-T01) / Um^2;

    % Use loss to get T03
    T03calc = T01* exp((Lr + Ls + R*log(p03/p01))/cp);
    
    % Isentropic case
    T03s = T01 .* (p03/p01).^((gam-1)/gam);
    
    % Calculate change for while loop
    deltaT = (T03 - T03calc)/T03; %% Add relative term
    T03 = T03calc;
    T04 = T03;   
end

%% Repacking into structs
g.rc=rc; g.rh=rh; g.rm=rm; g.A1=A1; g.A4=A4;
d.u1=u1; d.u4=u4; d.Um=Um; d.U1=U1; d.U2=U2; d.rpm=rpm; d.psi=psi;
q.M0=M0; q.M1=M1; q.M4=M4; q.Mtip=Mtip;
q.T00=T00; q.T01=T01; q.T02=T02; q.T03=T03; q.T03s=T03s; q.T04=T04;
q.T1=T1; q.T4=T4;

q

p00

p4


p04


p03
p01


